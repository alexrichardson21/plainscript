Carlitos {
  Program     =  Stmt+
  Stmt        =  SimpleStmt newline              -- simple
              |  "while" Exp Suite               -- while
              |  "if" Exp Suite
                 ("elif" Exp Suite)*
                 ("else" Suite)?                 -- if
              |  "def" id "(" Params ")" Suite   -- fundecl
  SimpleStmt  =  VarExps "=" Exps                -- assign
              |  Call                            -- call
              |  "break"                         -- break
              |  "return" Exp?                   -- return
  Suite       =  ":" SimpleStmt newline          -- small
              |  ":" newline indent Stmt+ dedent -- large

  Exp         =  Exp "or" Exp1                   -- or
              |  Exp "and" Exp1                  -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                 -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                 -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                 -- binary
              |  Exp4
  Exp4        =  prefixop Exp5                   -- unary
              |  Exp5
  Exp5        =  boollit
              |  numlit
              |  Call                            -- call
              |  VarExp
              |  "(" Exp ")"                     -- parens
  Call        =  VarExp "(" Args ")"

  Exps        =  Exp ("," Exp)*
  VarExp      =  id
  VarExps     =  VarExp ("," VarExp)*
  Param       =  id ("=" Exp)?
  Params      =  (Param ("," Param)*)?
  Arg         =  (id ":")? Exp
  Args        =  (Arg ("," Arg)*)?

  keyword     =  ("function" | "if" | "elif" | "else" | "while" | "return"
              |  "break" | "and" | "or" | "not" | "true" | "false") ~idrest
  id          =  ~keyword letter idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  prefixop    =  "-" | "not"
  indent      =  "⇨"
  dedent      =  "⇦"

  newline     =  "\n"+
  space      :=  " " | "\t"
  comment     =  "#" (~"\n" any)* "\n"
}
